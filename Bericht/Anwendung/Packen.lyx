#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass scrartcl
\begin_preamble
\usepackage{txfonts}
\usepackage[T1]{fontenc}
\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language ngerman
\language_package auto
\inputencoding auto
\fontencoding default
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 0
\use_package mathtools 1
\use_package mhchem 0
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\topmargin 2.5cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation 0bp
\quotes_language polish
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Subsection
Packen beliebiger Polygone
\end_layout

\begin_layout Standard
Analog zum Stapeln werden auch beim Packen zunächst alle Polygone über ihrem
 Flächenschwerpunkt im Ursprung gestapelt.
 Dies hat den Vorteil, dass alle Polygone bereits sehr nah beieinander sind
 und nicht erst einander angenähert werden müssen.
\end_layout

\begin_layout Standard
Dieser Zustand ist natürlich im Endeffekt ein ungültiger Zustand, da das
 Packen eben keine Überlappungen zulässt, also übergeben wir diesen Zustand
 an unsere Metaheuristiken.
\end_layout

\begin_layout Standard
Auch hier benötigen wir nun wieder zwei Mutator-Klassen.
 Der unäre Mutator ist relativ simpel.
 Er nimmt sich einfach jedes Polygon eines Zustandes und bewegt diese eine
 zufällige, nach oben begrenzte Weite in einem zufälligen Winkel von der
 aktuellen Position weg.
 Zusätzlich kann man auch noch eine Rotation der Polygone hinzufügen (Anhang
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Einfacher-Pack-Mutator"

\end_inset

).
\end_layout

\begin_layout Standard
Der zweite Mutator ist analog zum Stapeln der binäre Mutator.
 Dieser erhält zwei Lösungen, aus denen er eine neue erzeugt, indem die
 schlechtere Lösung an die bessere angenähert wird.
 Dies geschieht ebenfalls durch Kopieren einer Teilmenge der Polygone der
 besseren Lösung in die schlechtere Lösung.
\end_layout

\begin_layout Standard
Das besondere an dieser Implementierung ist jedoch die Zielfunktion bzw.
 Fitness-Funktion.
 Wie vielleicht schon bemerkt wurde, haben wir bisher bewusst noch nicht
 auf Überlappungen in den Zuständen reagiert.
\end_layout

\begin_layout Standard
Diese werden erst von der Zielfunktion bestraft.
 Das heißt, wenn es Überlappungen gibt, wird das Ergebnis der Zielfunktion
 um frei wählbare Werte verschlechtert, wie z.B.
 durch Addition der Größe der Bounding Box oder der Konvexen Hülle.
\end_layout

\begin_layout Standard
Dies führt dazu, dass am Ende in der Regel irgendein Zustand ohne Überlappung,
 der sogar eine ziemlich gute Fitness hat, zurückgegeben wird (Anhang 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Binärer-Pack-Mutator"

\end_inset

).
\end_layout

\end_body
\end_document
