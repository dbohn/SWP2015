#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass scrartcl
\begin_preamble
\usepackage{txfonts}
\usepackage[T1]{fontenc}
\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language ngerman
\language_package auto
\inputencoding auto
\fontencoding default
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 0
\use_package mathtools 1
\use_package mhchem 0
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\topmargin 2.5cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation 0bp
\quotes_language polish
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Einleitung
\end_layout

\begin_layout Subsection
Motivation und Problemstellung
\end_layout

\begin_layout Standard
Das im Rahmen des Softwareprojekts untersuchte Stapeln und Packen von Polygonen
 ist bereits in der einfachsten Version NP-schwer 
\begin_inset CommandInset citation
LatexCommand cite
key "Scheithauer.2008,Wottawa.1996"

\end_inset

.
 Dies bedeutet, dass es sehr wahrscheinlich keinen Algorithmus gibt, der
 eine optimale Stapelung bzw.
 Packung für eine beliebige Anzahl von beliebigen Polygonen in polynomieller
 Zeit findet.
 Zur Approxmiation von optimalen Lösungen können allerdings Metaheuristiken
 verwendet werden.
 Bei einer Metaheuristik handelt es sich um ein Optimierungsverfahren, das
 zunächst unabhängig von einem spezifischen Problem ist.
 Die problembezogenen Teile des Algorithmus werden gekapselt und von einem
 problemunabhängigen Algorithmus gesteuert.
 Dies ist auch der Hauptunterschied zu einer gewöhnlichen Heuristik, die
 oftmals komplett problembezogen ist.
 Wie bei einer Heuristik auch ist das Ziel einer Metaheuristik die Suche
 von nahezu optimalen Lösungen für ein Optimierungsproblem mit vertretbarem
 Zeitaufwand.
 Die durch die (Meta)heuristik gefundene Lösung muss allerdings nicht zwangsläuf
ige auch eine zulässige Lösung sein.
 Da es sich bei der Lösung lediglich um eine Approximation handelt, muss
 die gefundene Lösung auch nicht optimal sein.
 [QUELLEN WÄREN GUT]
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Im Softwareprojekt sollten verschiedene Metaheuristik generisch implementiert
 werden, damit sie anschließend für das Stapeln und Packen von Polygonen
 verwendet werden können.
 Außerdem sollten die Metaheuristiken während der Implementierungsphase
 anhand einfacher Probleme getestet werden.
 
\end_layout

\begin_layout Subsection
Arbeitsablauf
\end_layout

\begin_layout Standard
Zu Beginn des Softwareprojekts stand die Recherche der ersten zu implementierend
en Metaheuristik, dem Simulated Annealing.
 Mit der weiteren Metaheuristik-Gruppe wurden diesbezüglich gemeinsame Schnittst
ellen vereinbart und anschließend wurde eine erste Version von Simulated
 Annealing implementiert.
 Um die Implementierung zu testen, haben wir uns ein einfacheres (im Sinne
 von einfacher zu implementieren) NP-schweres Problem ausgesucht, das Traveling
 Salesman Problem (TSP).
 Wir haben eine grafische Oberfläche (GUI) zum Testen der Metaheuristiken
 entwickelt, die in der Lage ist, das TSP für einen festen, vorgegebenen
 Graphen und dessen Lösung durch die Metaheuristik zu visualisieren.
 
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Anschließend haben wir als weitere Metaheuristik zunächst einen genetischen
 Algorithmus und anschließend eine weitere Variante von genetischen Algorithmen,
 den 
\emph on
Insular Genetic Algorithm
\emph default
, implementiert.
 Parallel zu den genetischen Algorithmen haben wir zusätzlich zwei schwarmbasier
te Metaheuristiken implementiert: 
\emph on
Particle Swarm Optimization
\emph default
 und den Glühwürmchen Algorithmus (
\emph on
Firefly Algorithm
\emph default
).
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Zum Ende des Softwareprojekts haben wir unseren Fokus auf die Anwendung
 unserer implementierten Metaheuristiken gerichtet.
 Wir haben die Metaheuristiken zunächst angewendet auf das Stapeln beliebiger
 Polygone.
 Zum Abschluss haben wir dann ebenfalls das Packen beliebiger Polygone mittels
 Metaheuristiken implementiert und bis zum Ende des Softwareprojekts kontinuierl
ich optimiert und erweitert.
\end_layout

\end_body
\end_document
