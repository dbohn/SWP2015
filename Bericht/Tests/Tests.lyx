#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass scrartcl
\begin_preamble
\usepackage{txfonts}
\usepackage[T1]{fontenc}
\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language ngerman
\language_package auto
\inputencoding auto
\fontencoding default
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 0
\use_package mathtools 1
\use_package mhchem 0
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\topmargin 2.5cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation 0bp
\quotes_language polish
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Tests
\end_layout

\begin_layout Standard
Neben der Implementierung der Metaheuristiken sollten die Metaheuristiken
 auch anhand eines einfachen Problems getestet werden.
 Wir haben uns entschieden, unsere Metaheuristiken anhand des Traveling
 Salesman Problem (TSP) zu testen.
 Diese Entscheidung haben wir unter anderem getroffen, weil das TSP als
 Beispiel in vielen Publikationen zu Optimierungsverfahren ( 
\begin_inset CommandInset citation
LatexCommand cite
key "Bookstaber.,Braun.,Clerc.30.06.2000,Goldbarg.,Shi.b,Ucoluk."

\end_inset

) verwendet wird.
 Außerdem lässt es sich leicht visualisieren und die gefundenen Lösungen
 lassen sich als Konsequenz daraus ebenfalls gut manuell verifizieren.
 
\end_layout

\begin_layout Subsection
Traveling Salesman Problem (TSP)
\end_layout

\begin_layout Standard
Das Traveling Salesman Problem oder auch das Problem des Handlungsreisenden
 bezeichnet im Wesentlichen die Problemstellung, dass ein Handlungsreisender
 
\begin_inset Formula $n$
\end_inset

 Städte jeweils genau einmal besuchen möchte und die kürzeste Route zwischen
 den 
\begin_inset Formula $n$
\end_inset

 Städten sucht.
 Nachdem er in jeder Stadt war, möchte der Handlungsreisende wieder in die
 Stadt zurückkehren, von der aus er gestartet ist.
 Ausgehend von dieser Grundformulierung aus dem Jahr 
\begin_inset Formula $1930$
\end_inset

 
\begin_inset CommandInset citation
LatexCommand cite
key "Greco.2008."

\end_inset

 haben sich im Laufe der Zeit viele verschiedene Varianten entwickelt.
 Wir haben uns bei dem Test auf das klassische symmetrische TSP beschränkt,
 bei dem für jeweils zwei Städte 
\begin_inset Formula $A$
\end_inset

 und 
\begin_inset Formula $B$
\end_inset

 der Weg von 
\begin_inset Formula $A$
\end_inset

 nach 
\begin_inset Formula $B$
\end_inset

 genauso lang ist wie für 
\begin_inset Formula $B$
\end_inset

 nach 
\begin_inset Formula $A$
\end_inset

.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Das TSP lässt sich mathematisch modellieren auf Grundlage eines gewichteten,
 ungerichteten Graphen.
 Die Knoten des Graphen entsprechen dabei den Städten und die Kanten repräsentie
ren die Verbindungen zwischen den Städten.
 Die Kantengewichte entsprechen der Distanz der durch die Kante verbundenen
 Städte.
 Eine Tour und somit auch eine mögliche Lösung des TSP ist dann ein Kreis
 in diesem Graphen, der jeden Knoten genau einmal enthält.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Ein weiterer Grund für die Auswahl von TSP als Testproblem war die Tatsache,
 dass die hier beschriebene Optimierungsversion des TSP NP-schwer ist.
 Dies ist insofern von Vorteil, da auch das Packen von Polygonen NP-schwer
 ist und wir so bei der Implementierung in einem kleineren Umfang bereits
 Erfahrungen im Umgang mit NP-schweren Optimierungsproblemen sammeln konnten.
\end_layout

\begin_layout Subsection
Test der Metaheuristiken
\end_layout

\begin_layout Standard
Für jede Metaheuristik haben wir als Test die problemspezifischen Komponenten
 für das TSP implementiert.
 Während sich die meisten Komponenten jeweils unterscheiden, ist die Zielfunktio
n immer dieselbe.
 Die Zielfunktion, die es zu minimieren gilt, ist die Summe der Kantengewichte
 (Distanzen) einer Tour.
 Für Simulated Annealing musste außerdem ein Mutator implementiert werden
 
\begin_inset CommandInset citation
LatexCommand cite
key "Bookstaber."

\end_inset

, der eine neue Tour durch Vertauschen zweier zufälliger Städte aus einer
 bestehenden Lösung erzeugt.
 
\series bold
\color red
Was musste bei genetischen Algorithmen konkret implementiert werden?
\series default
 
\color inherit
Für PSO musste neben dem bereits beschriebenen Mutator noch ein zusätzlicher
 binärer Mutator implementiert werden, der eine Tour einer anderen Tour
 annähert.
 Hier wurden drei verschiedene Varianten implementiert: One-Point-Crossover
 (OPC), Partially-Matched-Crossover (PMX) 
\begin_inset CommandInset citation
LatexCommand cite
key "Helwig.2014"

\end_inset

 und eine adaptive Variante 
\begin_inset CommandInset citation
LatexCommand cite
key "Goldbarg."

\end_inset

.
 Für den Firefly Algorithmus wurde ebenfalls ein zusätzlicher binärer Mutator
 zur Annäherung von zwei Lösungen benötigt und exemplarisch als 
\emph on
TSPApproachMutator
\emph default
 implementiert.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Zur Visualisierung der Lösung des TSP durch die Metaheuristiken haben wir
 eine grafische Oberfläche implementiert, anhand derer die Lösung nachvollzogen
 werden kann (Anhang 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Test-GUI-zur-Visualisierung"

\end_inset

).
 Neben der Visualisierung des Graphen können auch noch spezifische Parameter
 für die Metaheuristiken eingestellt werden und so mit den Parametern experiment
iert werden (Anhang 
\begin_inset CommandInset ref
LatexCommand ref
reference "GUI-Parameter"

\end_inset

).
 Die Knoten sind der Übersichtlichkeit halber in einem Gitter angeordnet,
 wobei die Distanz zwischen jeweils zwei horizontal und vertikal adjazenten
 Knoten immer 
\begin_inset Formula $1$
\end_inset

 ist.
 Für eine Testinstanz von 
\begin_inset Formula $10\times10$
\end_inset

 Städten bedeutet dies beispielsweise eine optimale Weglänge von 
\begin_inset Formula $100$
\end_inset

.
\end_layout

\end_body
\end_document
